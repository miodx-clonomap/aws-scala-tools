package ohnosequences.awstools.dynamodb

import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient
import com.amazonaws.services.dynamodbv2.model._
import ohnosequences.awstools.regions.Region
import ohnosequences.logging.ConsoleLogger
import org.junit.Test
import org.junit.Assert._

import java.io.File
import com.amazonaws.services.dynamodb.datamodeling._
import annotation.Annotation
import scala.collection.JavaConversions._

class DynamoDBTests {

  // @Test
  def utilsTest: Unit = {


    val provider = new com.amazonaws.auth.PropertiesFileCredentialsProvider(new java.io.File(System.getProperty("user.home"), ".aws/era7.credentials.prop").getAbsolutePath)
    val ddb = new AmazonDynamoDBClient(provider)
    ddb.setRegion(Region.Ireland)
    val logger = new ConsoleLogger("test")

    val tableName = "utilsTestTable"
    Utils.createTable(ddb, tableName, new AttributeDefinition("id", ScalarAttributeType.S), None, logger)
    val requests: List[WriteRequest] = (1 to 102).toList.map { i =>
      val item =  Map(
        "id" -> new AttributeValue().withS(i.toString),
        "val" -> new AttributeValue().withS(i.toString)
      )
      new WriteRequest(new PutRequest(item))
    }
    logger.benchExecute("batch")(Utils.writeWriteRequests(ddb, tableName, requests, logger))

  //  logger.benchExecute("batch")(Utils.writeWriteRequestsNonBatch(ddb, tableName, requests, logger, System.currentTimeMillis(), requests.size))
    //ddb.createTable("", HashKey("id", StringType))
  }

  // @Test
  def policyTests {
   // val ddb = DynamoDB.create(new File("AwsCredentials.properties"))

    //    @DynamoDBTable(tableName = "test2")
    //    class Test2(var id: String = "", var name: String = "") {
    //
    //      def this() = this(id = "", name = "")
    //
    //      @DynamoDBHashKey
    //      @DynamoDBAutoGeneratedKey
    //      def getId = id
    //      def setId(id: String) {this.id = id}
    //      def withId(id: String) = {this.id = id; this}
    //
    //      @DynamoDBAttribute
    //      def getName = name
    //      def setName(name: String) {this.name = name}
    //      def withName(name: String) = {this.name = name; this}
    //    }

    // val x = List(1, 2, 3)
    // val y = List(1, 2, 3)

    // val sum = x.flatMap {
    //   a => y.map {
    //     b => a + b
    //   }
    // }



    // val test = new User()
    // test.setId("123")
    // test.setName("testName")
    // val mapper = new DynamoDBMapper(ddb.ddb)
    // mapper.save(test)

    // val test2 = mapper.load(classOf[User], "123")

    // ddb.shutdown()


    // assertEquals("testName", test2.getName)
  }

  @Test
  def mappingTest {

    // println("test")
    // class AttributeNames(names: List[String]) extends Annotation

    // @AttributeNames(names = List("name", "age"))
    // case class User(name: String, age: Int)

    // println(classOf[User].getDeclaredAnnotations.toList)
    // val user = User.apply("test", 34)
    // classOf[User].
  }

  @Test
  def createTableTest {
    // val ddb = DynamoDB.create(new File("AwsCredentials.properties"))

    // //  val t1 = ddb.createTable("test123", HashKey("id", NumericType), RangeKey("timestamp", NumericType))
    // val t2 = ddb.getTable("test1234")
    // println(t2)
    // ddb.shutdown()
    //assertEquals(t1, t2)


  }

}
